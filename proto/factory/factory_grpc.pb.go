// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.3
// source: proto/factory.proto

package factory

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ContainerFactory_Apply_FullMethodName       = "/factory.ContainerFactory/Apply"
	ContainerFactory_Delete_FullMethodName      = "/factory.ContainerFactory/Delete"
	ContainerFactory_Show_FullMethodName        = "/factory.ContainerFactory/Show"
	ContainerFactory_HealthCheck_FullMethodName = "/factory.ContainerFactory/HealthCheck"
	ContainerFactory_Down_FullMethodName        = "/factory.ContainerFactory/Down"
	ContainerFactory_CrashLog_FullMethodName    = "/factory.ContainerFactory/CrashLog"
)

// ContainerFactoryClient is the client API for ContainerFactory service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ContainerFactoryClient interface {
	Apply(ctx context.Context, in *RequestBody, opts ...grpc.CallOption) (*BoolResponse, error)
	Delete(ctx context.Context, in *NameHolder, opts ...grpc.CallOption) (*BoolResponse, error)
	Show(ctx context.Context, in *NameHolder, opts ...grpc.CallOption) (*ResponseBody, error)
	HealthCheck(ctx context.Context, in *NameHolder, opts ...grpc.CallOption) (*NameHolder, error)
	Down(ctx context.Context, in *NameHolder, opts ...grpc.CallOption) (*NameHolder, error)
	CrashLog(ctx context.Context, in *NameHolder, opts ...grpc.CallOption) (*ResponseBody, error)
}

type containerFactoryClient struct {
	cc grpc.ClientConnInterface
}

func NewContainerFactoryClient(cc grpc.ClientConnInterface) ContainerFactoryClient {
	return &containerFactoryClient{cc}
}

func (c *containerFactoryClient) Apply(ctx context.Context, in *RequestBody, opts ...grpc.CallOption) (*BoolResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BoolResponse)
	err := c.cc.Invoke(ctx, ContainerFactory_Apply_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *containerFactoryClient) Delete(ctx context.Context, in *NameHolder, opts ...grpc.CallOption) (*BoolResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BoolResponse)
	err := c.cc.Invoke(ctx, ContainerFactory_Delete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *containerFactoryClient) Show(ctx context.Context, in *NameHolder, opts ...grpc.CallOption) (*ResponseBody, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResponseBody)
	err := c.cc.Invoke(ctx, ContainerFactory_Show_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *containerFactoryClient) HealthCheck(ctx context.Context, in *NameHolder, opts ...grpc.CallOption) (*NameHolder, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NameHolder)
	err := c.cc.Invoke(ctx, ContainerFactory_HealthCheck_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *containerFactoryClient) Down(ctx context.Context, in *NameHolder, opts ...grpc.CallOption) (*NameHolder, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NameHolder)
	err := c.cc.Invoke(ctx, ContainerFactory_Down_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *containerFactoryClient) CrashLog(ctx context.Context, in *NameHolder, opts ...grpc.CallOption) (*ResponseBody, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResponseBody)
	err := c.cc.Invoke(ctx, ContainerFactory_CrashLog_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ContainerFactoryServer is the server API for ContainerFactory service.
// All implementations must embed UnimplementedContainerFactoryServer
// for forward compatibility.
type ContainerFactoryServer interface {
	Apply(context.Context, *RequestBody) (*BoolResponse, error)
	Delete(context.Context, *NameHolder) (*BoolResponse, error)
	Show(context.Context, *NameHolder) (*ResponseBody, error)
	HealthCheck(context.Context, *NameHolder) (*NameHolder, error)
	Down(context.Context, *NameHolder) (*NameHolder, error)
	CrashLog(context.Context, *NameHolder) (*ResponseBody, error)
	mustEmbedUnimplementedContainerFactoryServer()
}

// UnimplementedContainerFactoryServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedContainerFactoryServer struct{}

func (UnimplementedContainerFactoryServer) Apply(context.Context, *RequestBody) (*BoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Apply not implemented")
}
func (UnimplementedContainerFactoryServer) Delete(context.Context, *NameHolder) (*BoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedContainerFactoryServer) Show(context.Context, *NameHolder) (*ResponseBody, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Show not implemented")
}
func (UnimplementedContainerFactoryServer) HealthCheck(context.Context, *NameHolder) (*NameHolder, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HealthCheck not implemented")
}
func (UnimplementedContainerFactoryServer) Down(context.Context, *NameHolder) (*NameHolder, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Down not implemented")
}
func (UnimplementedContainerFactoryServer) CrashLog(context.Context, *NameHolder) (*ResponseBody, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CrashLog not implemented")
}
func (UnimplementedContainerFactoryServer) mustEmbedUnimplementedContainerFactoryServer() {}
func (UnimplementedContainerFactoryServer) testEmbeddedByValue()                          {}

// UnsafeContainerFactoryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ContainerFactoryServer will
// result in compilation errors.
type UnsafeContainerFactoryServer interface {
	mustEmbedUnimplementedContainerFactoryServer()
}

func RegisterContainerFactoryServer(s grpc.ServiceRegistrar, srv ContainerFactoryServer) {
	// If the following call pancis, it indicates UnimplementedContainerFactoryServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ContainerFactory_ServiceDesc, srv)
}

func _ContainerFactory_Apply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestBody)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContainerFactoryServer).Apply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContainerFactory_Apply_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContainerFactoryServer).Apply(ctx, req.(*RequestBody))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContainerFactory_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NameHolder)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContainerFactoryServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContainerFactory_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContainerFactoryServer).Delete(ctx, req.(*NameHolder))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContainerFactory_Show_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NameHolder)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContainerFactoryServer).Show(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContainerFactory_Show_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContainerFactoryServer).Show(ctx, req.(*NameHolder))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContainerFactory_HealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NameHolder)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContainerFactoryServer).HealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContainerFactory_HealthCheck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContainerFactoryServer).HealthCheck(ctx, req.(*NameHolder))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContainerFactory_Down_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NameHolder)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContainerFactoryServer).Down(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContainerFactory_Down_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContainerFactoryServer).Down(ctx, req.(*NameHolder))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContainerFactory_CrashLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NameHolder)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContainerFactoryServer).CrashLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContainerFactory_CrashLog_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContainerFactoryServer).CrashLog(ctx, req.(*NameHolder))
	}
	return interceptor(ctx, in, info, handler)
}

// ContainerFactory_ServiceDesc is the grpc.ServiceDesc for ContainerFactory service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ContainerFactory_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "factory.ContainerFactory",
	HandlerType: (*ContainerFactoryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Apply",
			Handler:    _ContainerFactory_Apply_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _ContainerFactory_Delete_Handler,
		},
		{
			MethodName: "Show",
			Handler:    _ContainerFactory_Show_Handler,
		},
		{
			MethodName: "HealthCheck",
			Handler:    _ContainerFactory_HealthCheck_Handler,
		},
		{
			MethodName: "Down",
			Handler:    _ContainerFactory_Down_Handler,
		},
		{
			MethodName: "CrashLog",
			Handler:    _ContainerFactory_CrashLog_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/factory.proto",
}
